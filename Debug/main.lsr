STMicroelectronics assembler v4.52   (C)1987-2024   Wed Sep 25 21:11:17 2024
Page 1  Assembler
                                               d:\stm8\ac_start\main.asm

   1                         stm8/     
   2                         
   0  000000                                 #include "mapping.inc"
   1                                                          ;-------------------------------
                                                                ;-----------------------
   2                                                          ; SEGMENT MAPPING FILE 
                                                                ;AUTOMATICALLY GENERATED BY 
                                                                ;STVD
   3                                                          ; SHOULD NOT BE MANUALLY 
                                                                ;MODIFIED.
   4                                                          ; CHANGES WILL BE LOST WHEN FILE
                                                                ; IS REGENERATED.
   5                                                          ;-------------------------------
                                                                ;-----------------------
   6  000000                                 #define  RAM0 1
   7  000000                                 #define  ram0_segment_start 0
   8  000000                                 #define  ram0_segment_end FF
   9  000000                                 #define  RAM1 1
  10  000000                                 #define  ram1_segment_start 100
  11  000000                                 #define  ram1_segment_end 1FF
  12  000000                                 #define  stack_segment_start 200
  13  000000                                 #define  stack_segment_end 3FF
<END_OF_INCLUSION>
   0  000000                                 #include "stm8s003f3.inc"
   1                         ;----STM8S003F3 peripherial define file
   2                         ;--Registers of the MCU:
   3                                   
   4                                                          ;---CLK-----
   5  000000                                 #define  CLK_ICKR      $50C0;
   6  000000                                 #define  CLK_ECKR      $50C1;
   7  000000                                 #define  CLK_CMSR      $50C3;
   8  000000                                 #define  CLK_SWR       $50C4;
   9  000000                                 #define  CLK_SWCR      $50C5;
  10  000000                                 #define  CLK_CKDIVR    $50C6;
  11  000000                                 #define  CLK_PCKENR1    $50C7;
  12  000000                                 #define  CLK_CSSR       $50C8;
  13  000000                                 #define  CLK_CCOR       $50C9;
  14  000000                                 #define  CLK_PCKENR2    $50CA;
  15                                   
  16  000000                                 #define  HSERDY        #$02
  17  000000                                 #define  HSEEN         #$01
  18                                   
  19  000000                                 #define  SWIF    #$08 
  20  000000                                 #define  SWIEN         #$04
  21  000000                                 #define  SWEN          #$02
  22  000000                                 #define  SWBSY   #$01
  23                                   
  24  000000                                 #define  HSIDIV_1 #$00
  25  000000                                 #define  HSIDIV_2 #$08
  26  000000                                 #define  HSIDIV_4 #$10
  27  000000                                 #define  HSIDIV_8 #$18
  28                                   
  29  000000                                 #define  CPUDIV_1 #$00
  30  000000                                 #define  CPUDIV_2 #$01
  31  000000                                 #define  CPUDIV_4 #$02
  32  000000                                 #define  CPUDIV_8 #$03
  33  000000                                 #define  CPUDIV_16 #$04
  34  000000                                 #define  CPUDIV_32 #$05
STMicroelectronics assembler v4.52   (C)1987-2024   Wed Sep 25 21:11:17 2024
Page 2  Assembler
                                               d:\stm8\ac_start\main.asm

  35  000000                                 #define  CPUDIV_64 #$06
  36  000000                                 #define  CPUDIV_128 #$07
  37                                                          ;-------ITC------
  38  000000                                 #define  EXTI_CR1  $50A0  ;
  39  000000                                 #define  EXTI_CR2  $50A1  ;
  40                                                          ;----FLASH-------
  41  000000                                 #define  FLASH_CR1 $505A  ;
  42  000000                                 #define  FLASH_CR2 $505B  ;
  43  000000                                 #define  LASH_NCR2 $505C  ;
  44  000000                                 #define  FLASH_FPR $505D  ;
  45  000000                                 #define  FLASH _NFPR $505E  ; 	
  46  000000                                 #define  _NFPR $505E _IAPSR $505F  ;
  47                                                          ;--------PORT A-----
  48  000000                                 #define  PA_ODR        $5000;
  49  000000                                 #define  PA_IDR        $5001;
  50  000000                                 #define  PA_DDR        $5002;
  51  000000                                 #define  PA_CR1        $5003;
  52  000000                                 #define  PA_CR2  $5004  ;
  53                                                          ;--------PORT B------
  54  000000                                 #define  PB_ODR        $5005;
  55  000000                                 #define  PB_IDR        $5006;
  56  000000                                 #define  PB_DDR        $5007;
  57  000000                                 #define  PB_CR1        $5008;
  58  000000                                 #define  PB_CR2        $5009;
  59                                                          ;---------PORT  C-----
  60  000000                                 #define  PC_ODR        $500A;
  61  000000                                 #define  PC_IDR        $500B;
  62  000000                                 #define  PC_DDR        $500C;
  63  000000                                 #define  PC_CR1        $500D;
  64  000000                                 #define  PC_CR2        $500E;
  65                                   
  66                                                          ;----PORT D-------
  67  000000                                 #define  PD_ODR        $500F;
  68  000000                                 #define  PD_IDR        $5010;
  69  000000                                 #define  PD_DDR        $5011;
  70  000000                                 #define  PD_CR1        $5012;
  71  000000                                 #define  PD_CR2        $5013;
  72                                                          ;--------PORT E-------
  73  000000                                 #define  PE_ODR        $5014;
  74  000000                                 #define  PE_IDR        $5015;
  75  000000                                 #define  PE_DDR        $5016;
  76  000000                                 #define  PE_CR1        $5017;
  77  000000                                 #define  PE_CR2        $5018;
  78                                                          ;---------PORT F------
  79  000000                                 #define  PF_ODR        $5019;
  80  000000                                 #define  PF_IDR        $501A;
  81  000000                                 #define  PF_DDR        $501B;
  82  000000                                 #define  PF_CR1        $501C;
  83  000000                                 #define  PF_CR2        $501D;
  84                                                          ;------ITC---------
  85  000000                                 #define  $50A0 $50A0   ;
  86  000000                                 #define  $50A1 $50A1   ;
  87                                                          ;--------TIM 1----------
  88  000000                                 #define  TIM1_CR1  $5250  ;
  89  000000                                 #define  TIM1_CR2  $5251  ;
  90  000000                                 #define  TIM1_SMCR $5252  ;
  91  000000                                 #define  TIM1_ETR  $5253  ;
STMicroelectronics assembler v4.52   (C)1987-2024   Wed Sep 25 21:11:17 2024
Page 3  Assembler
                                               d:\stm8\ac_start\main.asm

  92  000000                                 #define  TIM1_IER  $5254  ;
  93  000000                                 #define  TIM1_SR1  $5255  ;
  94  000000                                 #define  TIM1_SR2  $5256  ;
  95  000000                                 #define  TIM1_EGR  $5257  ;
  96  000000                                 #define  TIM1_CCMR1 $5258  ;
  97  000000                                 #define  TIM1_CCMR2 $5259  ;
  98  000000                                 #define  TIM1_CCMR3 $525A  ;
  99  000000                                 #define  TIM1_CCMR4  $525B  ;
 100  000000                                 #define  TIM1_CCER1 $525C  ;
 101  000000                                 #define  TIM1_CCER2 $525D  ;
 102  000000                                 #define  TIM1_CNTRH $525E  ;
 103  000000                                 #define  TIM1_CNTRL  $255f  ;
 104  000000                                 #define  TIM1_PSCRH  $5260  ;
 105  000000                                 #define  TIM1_PSCRL $5261  ;
 106  000000                                 #define  TIM1_ARRH  $5262  ;
 107  000000                                 #define  TIM1_ARRL  $5263  ;
 108  000000                                 #define  TIM1_RCR   $5264  ;
 109  000000                                 #define  TIM1_CCR1H $5265  ;
 110  000000                                 #define  TIM1_CCR1L $5266  ;
 111  000000                                 #define  TIM1_CCR2H $5267  ;
 112  000000                                 #define  TIM1_CCR2L $5268  ;
 113  000000                                 #define  TIM1_CCR3H $5269  ;
 114  000000                                 #define  TIM1_CCR3L $526A  ;
 115  000000                                 #define  TIM1_CCR4H  $526B  ;
 116  000000                                 #define  TIM1_CCR4L $526C  ;
 117  000000                                 #define  TIM1_BKR   $526D  ;
 118  000000                                 #define  TIM1_DTR   $526E  ;
 119  000000                                 #define  TIM1_OISR  $526F  ;
 120                                   
 121  000000                                 #define  TIM_CR1_CENTER_ALINGN_1 #$20
 122  000000                                 #define  TIM_CR1_CENTER_ALINGN_2 #$40
 123  000000                                 #define  TIM_CR1_CENTER_ALINGN_3 #$60
 124  000000                                 #define  TIM_CR1_COUNTS_UP #$00
 125  000000                                 #define  TIM_CR1_COUNTS_DOWN #$10
 126  000000                                 #define  TIM_CR1_PRELOAD #$80
 127  000000                                 #define  TIM_CCMR_ACTIVE_ON_MATCH #$10
 128  000000                                 #define  TIM_CCMR_INACTIVE_ON_MATCH #$20
 129  000000                                 #define  TIM_CCMR_TOGGLE   #$30
 130  000000                                 #define  TIM_CCMR_FORCE_INACTIVE #$40 
 131  000000                                 #define  TIM_CCMR_FORCE_ACTIVE   #$50
 132                                                          ;-------------SPI----------
 133  000000                                 #define  SPI_CR1  $5200  ;
 134  000000                                 #define  SPI_CR2 $5201  ;
 135  000000                                 #define  SPI_ICR  $5202  ;
 136  000000                                 #define  SPI_SR        $5203;
 137  000000                                 #define  SPI_DR        $5204;
 138  000000                                 #define  SPI_CRCPR     $5205;
 139  000000                                 #define  SPI_RXCRCR    $5206;
 140  000000                                 #define  SPI_TXCRCR    $5207;
 141                                                          ;---------------I2C----------
 142  000000                                 #define  I2C_CR1       $5210;
 143  000000                                 #define  I2C_CR2       $5211;
 144  000000                                 #define  I2C_FREQR     $5212;
 145  000000                                 #define  I2C_OARL      $5213;
 146  000000                                 #define  I2C_OARH      $5214;
 147  000000                                 #define  I2C_DR        $5216;
 148  000000                                 #define  I2C_SR1       $5217;
STMicroelectronics assembler v4.52   (C)1987-2024   Wed Sep 25 21:11:17 2024
Page 4  Assembler
                                               d:\stm8\ac_start\main.asm

 149  000000                                 #define  I2C_SR2       $5218;
 150  000000                                 #define  I2C_SR3       $5219;
 151  000000                                 #define  I2C_ITR       $521A;
 152  000000                                 #define  I2C_CCRL      $521B;
 153  000000                                 #define  I2C_CCRH      $521C;
 154  000000                                 #define  I2C_TRISER    $521D;
 155  000000                                 #define  I2C_PECR      $521E;
 156                                                          ;------------UART--------------
 157  000000                                 #define  UART1_SR      $5230;
 158  000000                                 #define  UART1_DR      $5231;
 159  000000                                 #define  UART1_BRR1    $5232;
 160  000000                                 #define  UART1_BRR2    $5233;
 161  000000                                 #define  UART1_CR1     $5234;
 162  000000                                 #define  UART1_CR2     $5235;
 163  000000                                 #define  UART1_CR3     $5236;
 164  000000                                 #define  UART1_CR4     $5237;
 165  000000                                 #define  UART1_CR5     $5238;
 166  000000                                 #define  UART1_GTR     $5239;
 167  000000                                 #define  UART1_PSCR    $523A;
 168                                                          ;----------TIM4----------------
 169  000000                                 #define  TIM4_CR1      $5340;
 170  000000                                 #define  TIM4_IER      $5343;
 171  000000                                 #define  TIM4_SR       $5344;
 172  000000                                 #define  TIM4_EGR      $5345;
 173  000000                                 #define  TIM4_CNTR     $5346;
 174  000000                                 #define  TIM4_PSCR     $5347;
 175  000000                                 #define  TIM4_ARR      $5348;
 176                                                          ;---------ADC1-----------------
 177                                   
 178  000000                                 #define  ADC_CSR       $5400;
 179  000000                                 #define  ADC_CR1       $5401;
 180  000000                                 #define  ADC_CR2       $5402;
 181  000000                                 #define  ADC_CR3       $5403;
 182  000000                                 #define  ADC_DRH       $5404;
 183  000000                                 #define  ADC_DRL       $5405;
 184  000000                                 #define  ADC_TDRH      $5406;
 185  000000                                 #define  ADC_TDRL      $5407;
 186  000000                                 #define  ADC_HTRH      $5408;
 187  000000                                 #define  ADC_HTRL      $5409;
 188  000000                                 #define  ADC_LTRH      $540A;
 189  000000                                 #define  ADC_LTRL      $540B;
 190  000000                                 #define  ADC_AWSRH     $540C;
 191  000000                                 #define  ADC_AWSRL     $540D;
 192  000000                                 #define  ADC_AWCRH     $540E;
 193  000000                                 #define  ADC_AWCRL     $540F;
 194                                                          ;;buffers
 195  000000                                 #define  ADC_DB0RH     $53E0;
 196  000000                                 #define  ADC_DB0RL     $53E1;
 197  000000                                 #define  ADC_DB1RH     $53E2;
 198  000000                                 #define  ADC_DB1RL     $53E3;
 199  000000                                 #define  ADC_DB2RH     $53E4;
 200  000000                                 #define  ADC_DB2RL     $53E5;
 201  000000                                 #define  ADC_DB3RH     $53E6;
 202  000000                                 #define  ADC_DB3RL     $53E7;
 203  000000                                 #define  ADC_DB4RH     $53E8;
 204  000000                                 #define  ADC_DB4RL     $53E9;
 205  000000                                 #define  ADC_DB5RH     $53EA;
STMicroelectronics assembler v4.52   (C)1987-2024   Wed Sep 25 21:11:17 2024
Page 5  Assembler
                                               d:\stm8\ac_start\main.asm

 206  000000                                 #define  ADC_DB5RL     $53EB;
 207  000000                                 #define  ADC_DB6RH     $53EC;
 208  000000                                 #define  ADC_DB6RL     $53ED;
 209  000000                                 #define  ADC_DB7RH     $53EC;
 210  000000                                 #define  ADC_DB7RL     $53ED;
 211  000000                                 #define  ADC_DB8RH     $53EC;
 212  000000                                 #define  ADC_DB8RL     $53ED;
 213                                   
 214                                   
 215                                                          ;----------TIM2----------
 216  000000                                 #define  TIM2_CR1      $5300;
 217  000000                                 #define  TIM2_IER      $5303;
 218  000000                                 #define  TIM2_SR1      $5304;
 219  000000                                 #define  TIM2_SR2      $5305;
 220  000000                                 #define  TIM2_EGR      $5306;
 221  000000                                 #define  TIM2_CCMR1    $5307;
 222  000000                                 #define  TIM2_CCMR2    $5308;
 223  000000                                 #define  TIM2_CCMR3    $5309;
 224  000000                                 #define  TIM2_CCER1    $530A;
 225  000000                                 #define  TIM2_CCER2    $530B;
 226  000000                                 #define  TIM2_CNTRH    $530C;
 227  000000                                 #define  TIM2_CNTRL  $530D  ;
 228  000000                                 #define  TIM2_PSCR     $530E;
 229  000000                                 #define  TIM2_ARRH     $530F;
 230  000000                                 #define  TIM2_ARRL     $5310;
 231  000000                                 #define  TIM2_CCR1H    $5311;
 232  000000                                 #define  TIM2_CCR1L    $5312;
 233  000000                                 #define  TIM2_CCR2H      $5313  ;
 234  000000                                 #define  TIM2_CCR2L    $5314;
 235  000000                                 #define  TIM2_CCR3H    $5315;
 236  000000                                 #define  TIM2_CCR3L    $5316;
 237                                   
 238                                   
<END_OF_INCLUSION>
   5                                   
   6                                                          ;--!!--SYSTEM CLOCK = 5MHz-----
   7                                                          ;please re-write it for case 
                                                                ;without crystal
   8  000000                                 #define  MIN_DURATION #$000A
   9                                   
  10                                   segment  byte at 0000-200 'user_ram'
  11                                   
  12  000000                       u16test   EQU      $0000
  13  000002                       u16delayDuration  EQU      $0002
  14  000004                       _semaphore  EQU      $0004
  15                         
  16                                   segment  'rom'
  17                         main.l    
  18                                                          ; initialize SP
  19  000000   AE03FF                        ldw      X,#stack_end
  20  000003   94                            ldw      SP,X
  21                                   
  22  000004                                 #ifdef   1             
  23                                                          ; clear RAM0
  24  000000                       ram0_start.b  EQU      $0
  25  0000FF                       ram0_end.b  EQU      $FF
  26  000004   AE0000                        ldw      X,#ram0_start
  27                         clear_ram0.l  
STMicroelectronics assembler v4.52   (C)1987-2024   Wed Sep 25 21:11:17 2024
Page 6  Assembler
                                               d:\stm8\ac_start\main.asm

  28  000007   7F                            clr      (X)
  29  000008   5C                            incw     X
  30  000009   A300FF                        cpw      X,#ram0_end   
  31  00000C R 23F9                          jrule    clear_ram0
  32  00000E                                 #endif   
  33                         
  34  00000E                                 #ifdef   1
  35                                                          ; clear RAM1
  36  000100                       ram1_start.w  EQU      $100
  37  0001FF                       ram1_end.w  EQU      $1FF          
  38  00000E   AE0100                        ldw      X,#ram1_start
  39                         clear_ram1.l  
  40  000011   7F                            clr      (X)
  41  000012   5C                            incw     X
  42  000013   A301FF                        cpw      X,#ram1_end   
  43  000016 R 23F9                          jrule    clear_ram1
  44  000018                                 #endif   
  45                         
  46                                                          ; clear stack
  47  000200                       stack_start.w  EQU      $200
  48  0003FF                       stack_end.w  EQU      $3FF
  49  000018   AE0200                        ldw      X,#stack_start
  50                         clear_stack.l  
  51  00001B   7F                            clr      (X)
  52  00001C   5C                            incw     X
  53  00001D   A303FF                        cpw      X,#stack_end  
  54  000020 R 23F9                          jrule    clear_stack
  55                         
  56                         
  57                         ;                                      _      
  58                         ;  _   _ ___  ___ _ __    ___ ___   __| | ___ 
  59                         ; | | | / __|/ _ \ '__|  / __/ _ \ / _` |/ _ \
  60                         ; | |_| \__ \  __/ |    | (_| (_) | (_| |  __/
  61                         ;  \__,_|___/\___|_|     \___\___/ \__,_|\___|
  62                         
  63                                                          ;--init-clock-------------
  64                                                          ;;EXTERNAL interrupt registers 
                                                                ;must be set before any 
                                                                ;interrupts!
  65                                                          ; $0-fall and LOW, $1-rise, 
                                                                ;$2-fall, $3-rise & fall
  66  000022   721050A0                      BSET     $50A0 , #0    ;PAIS 0
  67  000026   721250A0                      BSET     $50A0 , #1    ;PAIS 1
  68                                   
  69  00002A   A600                          LD       A, #00
  70  00002C   88                            PUSH     A
  71  00002D R CD0000                        CALL     clkSetHsiDivider
  72  000030   5B01                          ADDW     SP, #1
  73  000032   A600                          LD       A, #0
  74  000034   88                            PUSH     A
  75  000035 R CD0000                        CALL     clkSetCpuDivider
  76  000038   5B01                          ADDW     SP, #1
  77  00003A R CD0000                        CALL     clkSwitchToCrystal
  78                                                          ;----------------------
  79                                   
  80                         ;peripherial ON
  81  00003D   A68F                          LD       A, #$8f
STMicroelectronics assembler v4.52   (C)1987-2024   Wed Sep 25 21:11:17 2024
Page 7  Assembler
                                               d:\stm8\ac_start\main.asm

  82  00003F   88                            PUSH     A
  83  000040 R CD0000                        CALL     clkBusPeripherial1
  84  000043   5B01                          ADDW     SP,#1
  85                                                          ;---init global variables: TIM1 
                                                                ;period
  86  000045   AE0180                        LDW      X, #$0180
  87  000048   BF02                          LDW      u16delayDuration, X
  88  00004A   BF00                          LDW      u16test, X
  89                         ;PC3-TIM1 CH3
  90  00004C   7216500C                      BSET     $500C, #$3    ;output
  91  000050   7216500D                      BSET     $500D, #$3    ; push-pull
  92  000054   72185011                      BSET     $5011, #4     ;PD4 - out
  93  000058   72185012                      BSET     $5012, #4     ;push-pull
  94                         ;--PORTB EXTERN INTERRRUPT SET
  95  00005C   72165003                      BSET     $5003, #$3    ;pull-up resistor
  96                                   
  97                                                          ;==PROCEDURE==uart1ReceiverSetup
                                                                ;
  98  000060   AE0209                        LDW      X, #$209      ;@baudRate16, divider
  99  000063   89                            PUSHW    X
 100  000064   A600                          LD       A, #0         ;@dataLength8, $10->9bits (1stop
                                                                ; 1 start) , $00->8bits
 101  000066   88                            PUSH     A        
 102  000067   A600                          LD       A, #0         ;@stopBits8, active only when 8 
                                                                ;bits: $00->1bit,      
                                                                ;$20->2bits
 103  000069   88                            PUSH     A  
 104  00006A   A600                          LD       A, #0         ;@parity8, $00-disable, 
                                                                ;$04-enable: ($02-odd OR 
                                                                ;$00-even)
 105  00006C   88                            PUSH     A
 106  00006D R CD0000                        CALL     uart1ReceiverSetup
 107  000070   5B05                          ADDW     SP, #5        ;SP +5
 108                                                          ;===PROCEDURE 
                                                                ;'tim1OnePulsePwmCh3Setup'
 109                                                          ;timer is stopped!To start, call
                                                                ; - 'tim1OnePulseModeStart'
 110  000072   AE0062                        LDW      X, #$0062     ;@presc16,  $62=98, 5M/98=51KHz
 111  000075   89                            PUSHW    x
 112  000076   AE0120                        LDW      X, #$0120     ;@base16, -> 255 is base of 
                                                                ;counter $ff->100Hz period
 113  000079   89                            PUSHW    X
 114  00007A   AE011F                        LDW      X, #$011f     ;@comp16, ->  pulse width, CCR1 
                                                                ;content
 115  00007D   89                            PUSHW    X
 116  00007E   A668                          LD       A, #$68       ;@mode8,  -> (CCMR) : $60 
                                                                ;PWM_MODE1, $08 preload en.
 117  000080   88                            PUSH     A
 118  000081   A682                          LD       A, #$82       ;@polarity8 -> (CCER)  $00 
                                                                ;active HI,$02 active low
 119  000083   88                            PUSH     A
 120  000084   A680                          LD       A, #$80       ;@preload8  ->  $80 preload 
                                                                ;enable, CR1 content
 121  000086   88                            PUSH     A
 122  000087 R CD0000                        CALL     tim1OnePulsePwmCh3Setup
 123  00008A   5B09                          ADDW     SP, #$09
 124                         
STMicroelectronics assembler v4.52   (C)1987-2024   Wed Sep 25 21:11:17 2024
Page 8  Assembler
                                               d:\stm8\ac_start\main.asm

 125                                                          ;;---set up PORTA pin for 
                                                                ;interrupt enable
 126  00008C   72165004                      BSET     $5004, #$3    ;external interrupt PA3 turn on
 127                                   
 128                         infinite_loop.l  
 129                         ;  _                   
 130                         ; | | ___   ___  _ __  
 131                         ; | |/ _ \ / _ \| '_ \ 
 132                         ; | | (_) | (_) | |_) |
 133                         ; |_|\___/ \___/| .__/ 
 134                         ;               |_|    
 135  000090   9D                            NOP      
 136  000091   8F                            WFI      
 137  000092 R 20FC                          jra      infinite_loop
 138                         ;	 _ _ _     
 139                         ; | (_) |__  
 140                         ; | | | '_ \ 
 141                         ; | | | |_) |
 142                         ; |_|_|_.__/ 
 143                                   
 144                         ;-----L I B--
 145                         ;-----FUNCTION
 146                         hexToNibble  
 147                         ;@character8
 148                         ;SP+1
 149                         ;-0  1    4
 150                         ;[|A|RET|character]
 151  000094                                 #define  h01_char ($4,SP)
 152  000094   88                            PUSH     A
 153  000095   7B04                          LD       A, ($4,SP)
 154  000097   A030                          SUB      A, #$30
 155  000099 R 2F22                          JRSLT    _hxn_end_pr
 156  00009B   7B04                          LD       A, ($4,SP)
 157  00009D   A03A                          SUB      A, #$3A
 158  00009F R 2C08                          JRSGT    _letters_hex_
 159                                                          ;from 0 to 9
 160  0000A1   7B04                          LD       A, ($4,SP)
 161  0000A3   A030                          SUB      A, #$30
 162  0000A5   6B04                          LD       ($4,SP), A
 163  0000A7   84                            POP      A
 164  0000A8   81                            RET      
 165                         _letters_hex_  
 166  0000A9   7B04                          LD       A, ($4,SP)
 167  0000AB   A041                          SUB      A, #$41
 168  0000AD R 2F0E                          JRSLT    _hxn_end_pr
 169  0000AF   7B04                          LD       A, ($4,SP)
 170  0000B1   A047                          SUB      A, #$47
 171  0000B3 R 2C08                          JRSGT    _hxn_end_pr 
 172                                                          ;from A to F
 173  0000B5   7B04                          LD       A, ($4,SP)
 174  0000B7   A037                          SUB      A, #$37
 175  0000B9   6B04                          LD       ($4,SP), A
 176  0000BB   84                            POP      A
 177  0000BC   81                            RET      
 178                         _hxn_end_pr  
 179  0000BD   A602                          LD       A, #2
 180  0000BF   40                            NEG      A
STMicroelectronics assembler v4.52   (C)1987-2024   Wed Sep 25 21:11:17 2024
Page 9  Assembler
                                               d:\stm8\ac_start\main.asm

 181  0000C0   6B04                          LD       ($4,SP), A
 182  0000C2   84                            POP      A
 183  0000C3   81                            RET      
 184                                                          ;===PROCEDURE 
                                                                ;'tim1OnePulsePwmCh3Setup'
 185                                                          ;timer is stopped!To start, call
                                                                ; - 'tim1OnePulseModeStart'
 186                                                          ;@presc16,  
 187                                                          ;@base16, -> base of counter, 
                                                                ;ARRL
 188                                                          ;@comp16, ->  pulse width, CCR1 
                                                                ;content
 189                                                          ;@mode8,  -> (CCMR) : $60 
                                                                ;PWM_MODE1
 190                                                          ;$70 iPWM_MODE2
 191                                                          ;additional:  $04 fast, $08 
                                                                ;preload en.
 192                                                          ;@polarity8 -> (CCER)  $00 
                                                                ;active HI,$02 active low
 193                                                          ;@preload8  ->  $80 preload 
                                                                ;enable, CR1 content
 194                                                          ;after return: SP+9
 195                                                          ;stack frame:
 196                                                          ;[v8a|A|return|prel|pol|mode|com
                                                                ;p|base|presc]
 197                         tim1OnePulsePwmCh3Setup  
 198  0000C4   88                            PUSH     A
 199                                                          ;--allocate memory
 200  0000C5   5201                          SUBW     SP , #$01
 201                                                          ;-variables
 202  0000C7                                 #define  _012_v8a $00
 203  0000C7                                 #define  _012_prel $05
 204  0000C7                                 #define  _012_pol $06
 205  0000C7                                 #define  _012_mode $07
 206  0000C7                                 #define  _012_compH $08
 207  0000C7                                 #define  _012_compL $09
 208  0000C7                                 #define  _012_baseH $0A
 209  0000C7                                 #define  _012_baseL $0B
 210  0000C7                                 #define  _012_prescH $0C
 211  0000C7                                 #define  _012_prescL $0D
 212                                                          ;--disable timer
 213  0000C7   72115250                      BRES     $5250, #$00
 214                                                          ;--load comparand, Hi firstly
 215  0000CB   7B08                          LD       A, ($08,SP)
 216  0000CD   C75269                        LD       $5269, A
 217  0000D0   7B09                          LD       A, ($09,SP)
 218  0000D2   C7526A                        LD       $526A, A
 219                                                          ;--prescaler high byte firstly
 220  0000D5   7B0C                          LD       A, ($0C,SP)
 221  0000D7   C75260                        LD       $5260, A      
 222  0000DA   7B0D                          LD       A, ($0D,SP)
 223  0000DC   C75261                        LD       $5261, A
 224                                                          ;--load base, high byte first
 225  0000DF   7B0A                          LD       A, ($0A,SP)
 226  0000E1   C75262                        LD       $5262, A
 227  0000E4   7B0B                          LD       A, ($0B,SP)
 228  0000E6   C75263                        LD       $5263, A
STMicroelectronics assembler v4.52   (C)1987-2024   Wed Sep 25 21:11:17 2024
Page 10  Assembler
                                               d:\stm8\ac_start\main.asm

 229                                                          ;--load CCMR1
 230  0000E9   7B07                          LD       A, ($07,SP)
 231  0000EB   C7525A                        LD       $525A, A
 232                                                          ;--polarity
 233                                                          ; 1)store content of another 
                                                                ;channels
 234  0000EE   C6525D                        LD       A, $525D
 235  0000F1   A4F0                          AND      A, #$F0
 236  0000F3   6B00                          LD       ($00,SP), A   ; store
 237                                                          ;--2)load data for loading in 
                                                                ;register
 238  0000F5   7B06                          LD       A, ($06,SP)
 239  0000F7   AA01                          OR       A, #$01       ; turn on channel 
 240                                                          ;--3)apply another regs
 241  0000F9   1A00                          OR       A, ($00,SP)
 242  0000FB   C7525D                        LD       $525D, A
 243                                                          ;--turn on main channels
 244  0000FE   721E526D                      BSET     $526D, #$07   ; MOE bit
 245                                                          ;--CR1
 246  000102   7B05                          LD       A, ($05,SP)
 247  000104   C75250                        LD       $5250, A
 248  000107   72165250                      BSET     $5250, #$03   ;//one pulse mode ,stopped
 249  00010B   9D                            NOP      
 250                                                          ;--free memory
 251  00010C   5B01                          ADDW     SP, #$01
 252  00010E   9D                            NOP      
 253  00010F   84                            POP      A
 254  000110   81                            RET      
 255                                   
 256                                                          ;====P R O C E D U R E===turn on
                                                                ; clk bus
 257                                                          ;@peripherial8
 258                                                          ;TIM1-$80,TIM3-$40,TIM2/5-$20,TI
                                                                ;M4/6-$10,UART-see datasheet,
 259                                                          ;SPI-$2,I2C-1
 260                                                          ;STACK after return +1
 261                         clkBusPeripherial1  
 262  000111   88                            PUSH     A
 263  000112   7B04                          LD       A, ($04,SP)
 264  000114   C750C7                        LD       $50C7, A
 265  000117   84                            POP      A
 266  000118   81                            RET      
 267                                                          ;==P R O C E D U R E=="set HSI 
                                                                ;divider"
 268                                                          ;--@ char divider
 269                                                          ;STACK after return +1
 270                         clkSetHsiDivider  
 271                                                          ;--store registers A,X,Y,CC 
                                                                ;(1+2+2+1=6Bytes)
 272  000119   88                            PUSH     A
 273                                                          ;-read default value 
 274  00011A   C650C6                        LD       A, $50C6
 275                                                          ;---clear all the hsi divider 
                                                                ;bits
 276  00011D   A4E7                          AND      A, #$E7
 277                                                          ;--1st paprameter has offset 9 
                                                                ;bytes
STMicroelectronics assembler v4.52   (C)1987-2024   Wed Sep 25 21:11:17 2024
Page 11  Assembler
                                               d:\stm8\ac_start\main.asm

 278                                                          ; because A,X,Y,CC,SP has ben 
                                                                ;stored later 
 279  00011F   1A04                          OR       A, ($04,SP)
 280                                                          ;---update CLK_CKDIVR
 281  000121   C750C6                        LD       $50C6, A
 282                                                          ;--restore registers
 283  000124   84                            POP      A
 284  000125   81                            RET      
 285                                                          ;===P R O C E D U R E=switch to 
                                                                ;Crystal
 286                                                          ;--NO PARAMS, using interrupts 
                                                                ;(irq 2)
 287                                                          ;STACK after return 0
 288                         clkSwitchToCrystal  
 289  000126   88                            PUSH     A
 290                                                          ;---Enable the switching 
                                                                ;mechanism
 291  000127   721250C5                      BSET     $50C5, #1     ;SWEN
 292  00012B   721450C5                      BSET     $50C5, #2     ; SWIEN enable interrupt
 293                                                          ;---select source clock
 294                                                          ;0xE1: HSI selected as master 
                                                                ;clock source (reset value)
 295                                                          ;0xD2: LSI selected as master 
                                                                ;clock source (only if LSI_EN
 296                                                          ;option bit is set)
 297                                                          ;OUR CASE = 0xB4: HSE selected 
                                                                ;as master clock source
 298  00012F   A6B4                          LD       A, #$B4
 299  000131   C750C4                        LD       $50C4, A
 300                                                          ;waiting until clock system does
                                                                ; 
 301                                                          ; switching process 
                                                                ;automatically
 302  000134   9D                            NOP      
 303  000135   9D                            NOP      
 304  000136   9D                            NOP      
 305  000137   9D                            NOP      
 306                                                          ;waiting until the HSI be ready
 307  000138   8F                            WFI      
 308                                                          ;!clear SWIF flag in the 
                                                                ;interrupt service routine
 309  000139   84                            POP      A
 310  00013A   81                            RET      
 311                                                          ;======P R O C E D U R E==="set 
                                                                ;CPU divider"
 312                                                          ;@ char divider 
 313                                                          ;STACK after return +1
 314                         clkSetCpuDivider  
 315                                                          ;--store registers A,X,Y,CC 
                                                                ;(1+2+2+1=6Bytes)
 316  00013B   88                            PUSH     A
 317                                                          ;-read default value 
 318  00013C   C650C6                        LD       A, $50C6
 319                                                          ;---clear all the hsi divider 
                                                                ;bits
 320  00013F   A4F8                          AND      A, #$f8
 321                                                          ;--1st paprameter has offset 9 
STMicroelectronics assembler v4.52   (C)1987-2024   Wed Sep 25 21:11:17 2024
Page 12  Assembler
                                               d:\stm8\ac_start\main.asm

                                                                ;bytes
 322                                                          ; because A,X,Y,CC,SP has ben 
                                                                ;stored later
 323  000141   1A04                          OR       A, ($04,SP)
 324                                                          ;---update CLK_CKDIVR
 325  000143   C750C6                        LD       $50C6, A
 326                                                          ;--restore registers
 327  000146   84                            POP      A
 328  000147   81                            RET      
 329                                                          ;==PROCEDURE==uart1ReceiverSetup
                                                                ;
 330                         ;@baudRate16, divider
 331                         ;@dataLength8, $10->9bits (1stop 1 start) , $00->8bits
 332                                                          ;(set  manually below)
 333                         ;@stopBits8, active only when 8 bits: $00->1bit, $20->2bits
 334                         ;@parity8, $00-disable, $04-enable: ($02-odd OR $00-even)
 335                         ;-----------
 336                         ;SP +5
 337                         ;  0  1 2 4    5         6      7      8 
 338                         ;[v8a|A|RET|stopBits|dataLength|baudRate]
 339                         
 340                         uart1ReceiverSetup  
 341                                                          ;--store A
 342  000148   88                            PUSH     A
 343                                                          ;--allocate 1 byte
 344  000149   5201                          SUBW     SP, #$01
 345  00014B                                 #define  _U1000_v8a $00 
 346  00014B                                 #define  _U1000_parity $05
 347  00014B                                 #define  _U1000_stopBits $06 
 348  00014B                                 #define  _U1000_dataLength $07
 349  00014B                                 #define  _U1000_baudRateH $08
 350  00014B                                 #define  _U1000_baudRateL $09
 351                                                          ;--disable Rx, Tx
 352  00014B   72155235                      BRES     $5235, #$2    ; REN flag
 353  00014F   72175235                      BRES     $5235, #$3    ; TEN flag
 354                                                          ;--when the length 9 bits-jump 
                                                                ;below
 355  000153   A610                          LD       A, #$10
 356  000155   1407                          AND      A, ($07,SP)
 357  000157 R 2605                          JRNE     L_U1000_nsb   ;when 9 bits-go to label
 358                                                          ;--when 8 bit set stop bits
 359  000159   7B06                          LD       A, ($06,SP)
 360  00015B   C75236                        LD       $5236, A
 361                         L_U1000_nsb  
 362                                                          ;--write data length and parity
 363  00015E   7B07                          LD       A,($07,SP)
 364  000160   1A05                          OR       A, ($05,SP)
 365  000162   C75234                        LD       $5234, A
 366                                                          ;prepare UART1_BRR2
 367                                                          ;n4 n1
 368  000165   7B09                          LD       A, ($09,SP)
 369  000167   A40F                          AND      A, #$0F       ;
 370  000169   6B00                          LD       ( $00,SP),A   ; store nibble 1
 371  00016B   7B08                          LD       A, ($08,SP)
 372  00016D   A4F0                          AND      A, #$f0       ; nibble 4
 373  00016F   1A00                          OR       A, ($00,SP)   ; n4+n1
 374  000171   6B00                          LD       ( $00,SP),A   ; store BRR2 [n4,n1]
STMicroelectronics assembler v4.52   (C)1987-2024   Wed Sep 25 21:11:17 2024
Page 13  Assembler
                                               d:\stm8\ac_start\main.asm

 375                                                          ;;--send -TO REGISTER BRR2
 376  000173   C75233                        LD       $5233 , A
 377                                                          ;----n3 n2
 378  000176   7B08                          LD       A, ($08,SP)
 379  000178   4E                            SWAP     A
 380  000179   A4F0                          AND      A, #$F0
 381  00017B   6B00                          LD       ( $00,SP),A   ; store n3
 382  00017D   7B09                          LD       A, ($09,SP)
 383  00017F   4E                            SWAP     A
 384  000180   A40F                          AND      A, #$0f
 385  000182   1A00                          OR       A, ( $00,SP)
 386                                                          ;--send to register BRR1
 387  000184   C75232                        LD       $5232, A
 388                                                          ; RIEN interrupt on receive
 389  000187   721A5235                      BSET     $5235, #$5 
 390                                                          ;--setting REN bit "Receiver 
                                                                ;enable"
 391  00018B   72145235                      BSET     $5235 , #$2
 392                                                          ;--restore stack
 393  00018F   5B01                          ADDW     SP, #$01
 394  000191   84                            POP      A
 395  000192   81                            RET      
 396                         ;  ___ ____  ____  
 397                         ; |_ _/ ___||  _ \ 
 398                         ;  | |\___ \| |_) |
 399                         ;  | | ___) |  _ < 
 400                         ; |___|____/|_| \_\
 401                         
 402                         ;clock--Interrupt---Service----Routine
 403                         clockISR  
 404  000193   721750C5                      BRES     $50C5, #3     ; clear SWIF (in the ISR)
 405  000197   80                            IRET     
 406                         ;---PORT A Interrupt service routine (Zero Cross Detection)
 407                         portA_ISR  
 408  000198 R 7208501007                    BTJT     $5010, #4, led_tst_off
 409  00019D   7218500F                      BSET     $500F, #4
 410  0001A1 R CC0000                        JP       pa_isr_end
 411                         led_tst_off  
 412  0001A4   7219500F                      BRES     $500F, #4
 413                         pa_isr_end  
 414  0001A8   BE02                          LDW      X, u16delayDuration
 415  0001AA   5D                            TNZW     X
 416  0001AB R 2715                          JREQ     _empty_t1
 417  0001AD   9E                            LD       A, XH
 418  0001AE   C75262                        LD       $5262, A
 419  0001B1   9F                            LD       A, XL
 420  0001B2   C75263                        LD       $5263, A
 421  0001B5   5A                            DECW     X
 422  0001B6   9E                            LD       A, XH
 423  0001B7   C75269                        LD       $5269, A
 424  0001BA   9F                            LD       A, XL
 425  0001BB   C7526A                        LD       $526A, A
 426  0001BE   72105250                      BSET     $5250, #0
 427                         _empty_t1  
 428                                   
 429  0001C2   80                            IRET     
 430                                   
STMicroelectronics assembler v4.52   (C)1987-2024   Wed Sep 25 21:11:17 2024
Page 14  Assembler
                                               d:\stm8\ac_start\main.asm

 431                                                          ;-UART interrupt service 
                                                                ;routine
 432                         uartRxISR  
 433  0001C3   5201                          SUBW     SP, #1 
 434  0001C5   C65231                        LD       A, $5231
 435  0001C8   88                            PUSH     A
 436  0001C9 R CD0000                        CALL     hexToNibble
 437  0001CC   84                            POP      A
 438  0001CD R 2B57                          JRMI     _end_rx       ;exit when symbol non-hex
 439  0001CF R 720600040C                    BTJT     _semaphore, #3, _rx_4_nibble
 440                                                          ;nib 4 
 441  0001D4   5F                            CLRW     X
 442  0001D5   4E                            SWAP     A
 443  0001D6   95                            LD       XH, A
 444  0001D7   BF00                          LDW      u16test, X
 445  0001D9   72160004                      BSET     _semaphore, #3
 446  0001DD R CC0000                        JP       _end_rx
 447                         _rx_4_nibble  
 448  0001E0 R 7204000412                    BTJT     _semaphore, #2, _rx_3_nibble
 449                                                          ;nib 3
 450  0001E5   5F                            CLRW     X
 451  0001E6   BE00                          LDW      X, u16test
 452  0001E8   6B00                          LD       ($0,SP), A    ;store as local var
 453  0001EA   9E                            LD       A, XH         ;high byte
 454  0001EB   1A00                          OR       A, ($0,SP) 
 455  0001ED   95                            LD       XH, A
 456  0001EE   BF00                          LDW      u16test, X
 457  0001F0   72140004                      BSET     _semaphore, #2
 458  0001F4 R CC0000                        JP       _end_rx
 459                         _rx_3_nibble  
 460  0001F7 R 720200040E                    BTJT     _semaphore, #1, _rx_2_nibble
 461                                                          ;nib 2
 462  0001FC   5F                            CLRW     X
 463  0001FD   4E                            SWAP     A
 464  0001FE   BE00                          LDW      X, u16test
 465  000200   97                            LD       XL, A
 466  000201   BF00                          LDW      u16test, X
 467  000203   72120004                      BSET     _semaphore, #1
 468  000207 R CC0000                        JP       _end_rx
 469                         _rx_2_nibble  
 470  00020A R 7200000417                    BTJT     _semaphore, #0, _rx_1_nibble
 471                                                          ;nib 1
 472  00020F   5F                            CLRW     X
 473  000210   BE00                          LDW      X, u16test
 474  000212   6B00                          LD       ($0,SP), A    ;store as local var
 475  000214   9F                            LD       A, XL         ;low byte
 476  000215   1A00                          OR       A, ($0,SP) 
 477  000217   97                            LD       XL, A
 478  000218   BF00                          LDW      u16test, X
 479  00021A   A6F0                          LD       A, #$F0
 480  00021C   B404                          AND      A, _semaphore   ;clear semaphore
 481  00021E   B704                          LD       _semaphore, A
 482  000220   90BE00                        LDW      Y, u16test    ;copy word
 483  000223   90BF02                        LDW      u16delayDuration, Y   ; 
 484                         _rx_1_nibble  
 485                         
 486                         _end_rx   
STMicroelectronics assembler v4.52   (C)1987-2024   Wed Sep 25 21:11:17 2024
Page 15  Assembler
                                               d:\stm8\ac_start\main.asm

 487  000226   5B01                          ADDW     SP, #1 
 488  000228   80                            IRET     
 489                                   
 490  000229 R                               interrupt NonHandledInterrupt
 491                         NonHandledInterrupt.l  
 492  000229   80                            iret     
 493                         
 494                                   segment  'vectit'
 495  000000 R 00000000                      dc.l     {$82000000+main}  ; reset
 496  000004 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; trap
 497  000008 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq0
 498  00000C R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq1
 499  000010 R 00000000                      dc.l     {$82000000+clockISR}  ; irq2
 500  000014 R 00000000                      dc.l     {$82000000+portA_ISR}  ; irq3
 501  000018 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq4
 502  00001C R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq5
 503  000020 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq6
 504  000024 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq7
 505  000028 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq8
 506  00002C R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq9
 507  000030 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq10
 508  000034 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq11
 509  000038 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq12
 510  00003C R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq13
 511  000040 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq14
 512  000044 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq15
 513  000048 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq16
 514  00004C R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq17
 515  000050 R 00000000                      dc.l     {$82000000+uartRxISR}  ; irq18
 516  000054 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq19
 517  000058 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq20
 518  00005C R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq21
 519  000060 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq22
 520  000064 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq23
 521  000068 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq24
 522  00006C R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq25
 523  000070 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq26
 524  000074 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq27
 525  000078 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq28
 526  00007C R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq29
 527                         
 528  000080                                 end      
STMicroelectronics assembler v4.52   (C)1987-2024   Wed Sep 25 21:11:17 2024
Page 16  Assembler
                                               d:\stm8\ac_start\main.asm

Symbol Name                       Value     Call       Type  Scope      Rel.  Line  Privacy  Segment   Size  Bytes File

L_U1000_nsb                           015E         no  WORD  Internal   rel    361  private  text        53     0  -

NonHandledInterrupt               00000229  interrupt  LONG  Internal   rel    491  private  text         1     0  -

_semaphore                            0004         no  WORD  Internal   ABS     14  private  undef        0     0  -
_letters_hex_                         00A9         no  WORD  Internal   rel    165  private  text        20     0  -
_hxn_end_pr                           00BD         no  WORD  Internal   rel    178  private  text         7     0  -
_empty_t1                             01C2         no  WORD  Internal   rel    427  private  text         1     0  -
_rx_4_nibble                          01E0         no  WORD  Internal   rel    447  private  text        23     0  -
_rx_3_nibble                          01F7         no  WORD  Internal   rel    459  private  text        19     0  -
_rx_2_nibble                          020A         no  WORD  Internal   rel    469  private  text        28     0  -
_rx_1_nibble                          0226         no  WORD  Internal   rel    484  private  text         3     0  -
_end_rx                               0226         no  WORD  Internal   rel    486  private  text         3     0  -

clear_ram0                        00000007         no  LONG  Internal   rel     27  private  text        10     0  -
clear_ram1                        00000011         no  LONG  Internal   rel     39  private  text        10     0  -
clear_stack                       0000001B         no  LONG  Internal   rel     50  private  text       117     0  -
clkBusPeripherial1                    0111         no  WORD  Internal   rel    261  private  text         8     0  -
clkSetHsiDivider                      0119         no  WORD  Internal   rel    270  private  text        13     0  -
clkSwitchToCrystal                    0126         no  WORD  Internal   rel    288  private  text        21     0  -
clkSetCpuDivider                      013B         no  WORD  Internal   rel    314  private  text        13     0  -
clockISR                              0193         no  WORD  Internal   rel    403  private  text         5     0  -

hexToNibble                           0094         no  WORD  Internal   rel    146  private  text        21     0  -

infinite_loop                     00000090         no  LONG  Internal   rel    128  private  text         4     0  -

led_tst_off                           01A4         no  WORD  Internal   rel    411  private  text         4     0  -

main                              00000000         no  LONG  Internal   rel     17  private  text         7     0  -

portA_ISR                             0198         no  WORD  Internal   rel    407  private  text        12     0  -
pa_isr_end                            01A8         no  WORD  Internal   rel    413  private  text        26     0  -

ram0_start                              00         no  BYTE  Internal   ABS     24  private  text         0     0  -
ram0_end                                FF         no  BYTE  Internal   ABS     25  private  text         0     0  -
ram1_start                            0100         no  WORD  Internal   ABS     36  private  text         0     0  -
ram1_end                              01FF         no  WORD  Internal   ABS     37  private  text         0     0  -

stack_start                           0200         no  WORD  Internal   ABS     47  private  text         0     0  -
stack_end                             03FF         no  WORD  Internal   ABS     48  private  text         0     0  -

tim1OnePulsePwmCh3Setup               00C4         no  WORD  Internal   rel    197  private  text        77     0  -

u16test                               0000         no  WORD  Internal   ABS     12  private  undef        0     0  -
u16delayDuration                      0002         no  WORD  Internal   ABS     13  private  undef        0     0  -
uart1ReceiverSetup                    0148         no  WORD  Internal   rel    340  private  text        22     0  -
uartRxISR                             01C3         no  WORD  Internal   rel    432  private  text        29     0  -


36 labels
No errors on assembly of 'd:\stm8\ac_start\main.asm'